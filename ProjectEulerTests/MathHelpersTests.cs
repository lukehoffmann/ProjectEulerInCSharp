using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ProjectEulerInCSharp;

namespace ProjectEulerTests
{
    [TestClass]
    public class MathHelpersTests
    {

        [TestMethod]
        public void TestFactorsOf()
        {
            List<long> result;

            result = MathHelpers.FactorsOf(1);
            Assert.AreEqual(1, result.Count);
            Assert.IsTrue(result.Contains(1));

            result = MathHelpers.FactorsOf(2);
            Assert.AreEqual(2, result.Count);
            Assert.IsTrue(result.Contains(1));
            Assert.IsTrue(result.Contains(2));

            result = MathHelpers.FactorsOf(3);
            Assert.AreEqual(2, result.Count);
            Assert.IsTrue(result.Contains(1));
            Assert.IsFalse(result.Contains(2));
            Assert.IsTrue(result.Contains(3));

            result = MathHelpers.FactorsOf(12);
            Assert.AreEqual(6, result.Count);
            Assert.IsTrue(result.Contains(1));
            Assert.IsTrue(result.Contains(2));
            Assert.IsTrue(result.Contains(3));
            Assert.IsTrue(result.Contains(4));
            Assert.IsFalse(result.Contains(5));
            Assert.IsTrue(result.Contains(6));
            Assert.IsTrue(result.Contains(12));

            result = MathHelpers.FactorsOf(232792560);
        }

        [TestMethod]
        public void FibonacciNumbersTest()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
            //By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            var result = MathHelpers.FibonacciNumbersUpTo(100);
            Assert.AreEqual(1, result[0]);
            Assert.AreEqual(2, result[1]);
            Assert.AreEqual(3, result[2]);
            Assert.AreEqual(5, result[3]);
            Assert.AreEqual(8, result[4]);
            Assert.AreEqual(13, result[5]);
            Assert.AreEqual(21, result[6]);
            Assert.AreEqual(34, result[7]);
            Assert.AreEqual(55, result[8]);
            Assert.AreEqual(89, result[9]);
        }

        [TestMethod]
        public void LargestPrimeFactorsTest()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
            //By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            long result = MathHelpers.PrimeFactorsOf(13195).Max();
            Assert.AreEqual(29, result);
        }

        [TestMethod]
        public void IsPythagoreanTripletTest()
        {
            Assert.IsTrue(MathHelpers.IsPythagoreanTriplet(3, 4, 5));
        }

        [TestMethod]
        public void SumOfPrimesBelowTest()
        {
            // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
            Assert.AreEqual(17, MathHelpers.SumOfPrimesBelow(10));
        }

        [TestMethod]
        public void TriangleNumbers()
        {
            //The sequence of triangle numbers is generated by adding the natural numbers.
            //So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
            //The first ten terms would be:

            var result = MathHelpers.TriangleNumbers(10).ToList();

            // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
            Assert.AreEqual(10, result.Count);
            Assert.AreEqual(1, result[0]);
            Assert.AreEqual(3, result[1]);
            Assert.AreEqual(6, result[2]);
            Assert.AreEqual(10, result[3]);
            Assert.AreEqual(15, result[4]);
            Assert.AreEqual(21, result[5]);
            Assert.AreEqual(28, result[6]);
            Assert.AreEqual(36, result[7]);
            Assert.AreEqual(45, result[8]);
            Assert.AreEqual(55, result[9]);
        }

        [TestMethod]
        public void FirstTriangleNumberWhere()
        {
            //The sequence of triangle numbers is generated by adding the natural numbers.
            //So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
            //The first ten terms would be:

            // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

            Assert.AreEqual(1, MathHelpers.FirstTriangleNumberWhere(n => n > 0));
            Assert.AreEqual(3, MathHelpers.FirstTriangleNumberWhere(n => n > 1));
            Assert.AreEqual(6, MathHelpers.FirstTriangleNumberWhere(n => n > 3));
            Assert.AreEqual(10, MathHelpers.FirstTriangleNumberWhere(n => n > 6));
            Assert.AreEqual(15, MathHelpers.FirstTriangleNumberWhere(n => n > 10));
            Assert.AreEqual(21, MathHelpers.FirstTriangleNumberWhere(n => n > 15));
            Assert.AreEqual(28, MathHelpers.FirstTriangleNumberWhere(n => n > 21));
            Assert.AreEqual(36, MathHelpers.FirstTriangleNumberWhere(n => n > 28));
            Assert.AreEqual(45, MathHelpers.FirstTriangleNumberWhere(n => n > 36));
            Assert.AreEqual(55, MathHelpers.FirstTriangleNumberWhere(n => n > 45));
        }
    }

}
