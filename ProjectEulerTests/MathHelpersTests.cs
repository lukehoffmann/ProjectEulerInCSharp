using Microsoft.VisualStudio.TestTools.UnitTesting;
using ProjectEulerInCSharp;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace ProjectEulerTests
{
    [TestClass]
    public class MathHelpersTests
    {

        [TestMethod]
        public void TestFactorsOf()
        {
            List<int> result;

            result = MathHelpers.FactorsOf(1);
            Assert.AreEqual(0, result.Count());
            Assert.IsFalse(result.Contains(1));

            result = MathHelpers.FactorsOf(2);
            Assert.AreEqual(0, result.Count());
            Assert.IsFalse(result.Contains(1));
            Assert.IsFalse(result.Contains(2));

            result = MathHelpers.FactorsOf(3);
            Assert.AreEqual(0, result.Count());
            Assert.IsFalse(result.Contains(1));
            Assert.IsFalse(result.Contains(2));
            Assert.IsFalse(result.Contains(3));

            result = MathHelpers.FactorsOf(12);
            Assert.AreEqual(4, result.Count());
            Assert.IsFalse(result.Contains(1));
            Assert.IsTrue(result.Contains(6));
            Assert.IsFalse(result.Contains(12));

            result = MathHelpers.FactorsOf(232792560);
          
        }

        [TestMethod]
        public void FibonacciNumbersTest()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
            //By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            List<int> result = MathHelpers.FibonacciNumbersUpTo(100);
            Assert.AreEqual(1, result[0]);
            Assert.AreEqual(2, result[1]);
            Assert.AreEqual(3, result[2]);
            Assert.AreEqual(5, result[3]);
            Assert.AreEqual(8, result[4]);
            Assert.AreEqual(13, result[5]);
            Assert.AreEqual(21, result[6]);
            Assert.AreEqual(34, result[7]);
            Assert.AreEqual(55, result[8]);
            Assert.AreEqual(89, result[9]);

        }

        [TestMethod]
        public void LargestPrimeFactorsTest()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
            //By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            long result = MathHelpers.PrimeFactorsOf(13195).Max();
            Assert.AreEqual(29, result);
        }

    }

}
