using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerInCSharp
{
    public static class MathHelpers
    {

        /// <summary>
        /// Unordered factors of the given number, including one and the number itself.
        /// </summary>
        public static List<int> FactorsOf(int n)
        {
            return MathHelpers.FactorsOf((long)n);
        }

        /// <summary>
        /// Unordered factors of the given number, including one and the number itself.
        /// </summary>
        public static List<int> FactorsOf(long n)
        {
            List<int> l = new List<int>();
            long limit = (long)Math.Sqrt(n) + 1;

            for (int i = 1; i <= limit; i++)
            {
                if (n.MultipleOf(i))
                {
                    l.Add(i);
                    l.Add((int)(n / i));
                }
            }
            l = l.Distinct().ToList();
            l.Remove(1);
            l.Remove((int)n);
            return l;
        }

        /// <summary>
        ///Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        ///By starting with 1 and 2, the first 10 terms will be:
        ///1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///Return a list of all Fibonacci terms less that the given limit.
        /// </summary>
        /// <param name="limit"></param>
        /// <returns>An ordered collection containing part of the Fibonacci sequence.</returns>
        public static List<int> FibonacciNumbersLessThan(int limit)
        {
            if (limit < 0) { throw new ArgumentOutOfRangeException("limit", "too negative"); }

            List<int> l = new List<int>();
            l.Add(1);
            l.Add(2);

            for (int i = 2; true; i++)
            {
                int n = l[i - 1] + l[i - 2];
                if (n >= limit)
                {
                    break;
                }
                l.Add(n);
            }
            return l;
        }

        public static List<int> PrimeFactorsOf(long n)
        {
            return MathHelpers.FactorsOf(n).Where(f => f.IsPrime()).ToList();
        }


        internal static List<int> ProductsOfXDigitNumbers(int x)
        {
            int start = (int)Math.Pow(10, x - 1);
            int end = (int)Math.Pow(10, x) - 1;

            List<int> products = new List<int>();
            for (int i = start; i <= end; i++)
            {
                for (int j = start; j <= end; j++)
                {
                    products.Add(i * j);
                }
            }
            return products;
        }
    }
}
