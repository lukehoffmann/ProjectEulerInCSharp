using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerInCSharp
{
    public static class MathHelpers
    {

        /// <summary>
        /// Unordered factors of the given number, including one and the number itself.
        /// </summary>
        public static List<int> FactorsOf(int n)
        {
            return MathHelpers.FactorsOf((long)n);
        }

        /// <summary>
        /// Unordered factors of the given number, including one and the number itself.
        /// </summary>
        public static List<int> FactorsOf(long n)
        {
            List<int> l = new List<int>();
            long limit = (long)Math.Sqrt(n) + 1;

            for (int i = 1; i <= limit; i++)
            {
                if (n.MultipleOf(i))
                {
                    l.Add(i);
                    l.Add((int)(n / i));
                }
            }
            l = l.Distinct().ToList();
            l.Remove(1);
            l.Remove((int)n);
            return l;
        }

        /// <summary>
        ///Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        ///By starting with 1 and 2, the first 10 terms will be:
        ///1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///Return a list of all Fibonacci terms less that the given limit.
        /// </summary>
        /// <param name="limit"></param>
        /// <returns>An ordered collection containing part of the Fibonacci sequence.</returns>
        public static List<int> FibonacciNumbersUpTo(int limit)
        {
            if (limit < 0) { throw new ArgumentOutOfRangeException("limit", "too negative"); }

            List<int> l = new List<int>() { 1, 2 };
            do
            {
                l.Add(l[l.Count - 1] + l[l.Count - 2]);

            } while (l[l.Count - 1] <= limit);

            return l;
        }

        /// <summary>
        /// An unordered list containing the number's factors that are prime numbers.
        /// </summary>
        public static List<int> PrimeFactorsOf(long n)
        {
            return MathHelpers.FactorsOf(n)
                .Where(f => f.IsPrime())
                .ToList();
        }


        internal static List<int> AllProductsOfXDigitNumbers(int xDigits)
        {
            int start = (int)Math.Pow(10, xDigits - 1); // e.g. when x is 3 > 10^(3 - 1) = 100
            int end = (int)Math.Pow(10, xDigits) - 1;   // e.g. when x is 3 > (10^3) - 1 = 999
            int count = end - start + 1;
            
            List<int> range = Enumerable.Range(start, count).ToList();
            List<int> products = new List<int>();

            range.ForEach(i => range.ForEach(j => products.Add(i * j)));

            return products.Distinct().ToList();
        }
    }
}
